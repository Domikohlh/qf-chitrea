#Import library
#Install all the libraries with 'pip install (Library)'

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os
from sklearn.model_selection import train_test_split, StratifiedKFold
from sklearn.metrics import confusion_matrix, precision_score, recall_score, mean_squared_error, accuracy_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import RidgeCV, Lasso, LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import VotingClassifier
from sklearn.svm import svc

#Import processed data
setwd = os.path('Your_work_path')
data = pd.read_csv('data_directory/processed_data.csv')
x = data['column1']
y = data['column2']

#Split the training and testing data 
x_train, y_train, x_test, y_test = train_test_split(x, y, test_size = 0.2, random_state = 42)

#Input the linear (base) model
ridge_model = RidgeCV(alphas=[0.1, 1.0, 10.0])
lasso_model = Lasso(alpha=0.1)
lin_model = LinearRegression()
svm_model = SVC()

for ml in (ridge_model, lasso_model, lin_model, svm_model):
     ml.fit(x_train, y_train)
     model_preds = ml.predict(x_test)
     print(ml.__class__.__name__, "Performance:")
     print("MSE:", mean_squared_error(y_test, model_preds))
     print("R2 :", r2_score(y_test, model_preds))
     print("Intercept (Theta_0):", model_model.intercept_)
     print("Coefficient (Theta_1):", model_model.coef_)
      
#Run the training data in Random Forest
rf_model = RandomForestRegressor(n_estimators=100, max_leaf_nodes = 10, random_state=42)
rf_model.fit(x_train, y_train)
rf_preds = rf_model.predict(x_test)

print("Random Forest Performance:")
print("MSE:", mean_squared_error(y_test, rf_preds))
print("R2 :", r2_score(y_test, rf_preds))


